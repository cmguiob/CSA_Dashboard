}
p_barplot_2 <- f_barplot_2(CSA_category = "Practices", year_1 = 2018, year_2 = 2021, location = "Doyogena", top = TRUE)
p_barplot_2
# Export
#ggsave(file = "p_barplot.png", plot = p_barplot, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
p_barplot_2 <- f_barplot_2(CSA_category = "Practices", year_1 = 2018, year_2 = 2021, location = "Doyogena", type = c("Agroforestry", "Crop rotation"))
p_barplot_2
# Export
#ggsave(file = "p_barplot.png", plot = p_barplot, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
p_barplot_2 <- f_barplot_2(CSA_category = "Practices", year_1 = 2018, year_2 = 2021, location = "Doyogena", type = c("Agroforestry", "Improved varieties"))
p_barplot_2
p_barplot_2 <- f_barplot_2(CSA_category = "Practices", year_1 = 2018, year_2 = 2021, location = "Doyogena", type = c("Agroforestry", "Improved varieties"), subtype = c("Agroforestry fallow", "Pest/disease tolerant", "Improved varieties (beans)"))
p_barplot_2
# Export
#ggsave(file = "p_barplot.png", plot = p_barplot, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
p_barplot_2 <- f_barplot_2(CSA_category = "Practices", year_1 = 2018, year_2 = 2021, location = "Doyogena", type = c("Agroforestry", "Improved varieties"), subtype = c("Agroforestry fallow", "Pest/disease tolerant"))
p_barplot_2
f_barplot_2 <- function(dataset = uptake_dat, CSA_category, location, type = uptake_dat$practice_type,
sub = uptake_dat$subtype,  year_1, year_2, top = FALSE){
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(ggh4x)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (location != dataset$site)
stop("assign a valid site name as location")
years <- dataset %>% ungroup() %>%
filter(site == location, option == CSA_category, practice_type %in% type, subtype %in% subtype) %>%            select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed site")
if (!missing(type)) {
dataset <- dataset %>% filter(practice_type %in% type)
if (!type %in% dataset$practice_type)
stop("assign a valid practice type")
}
if (!missing(sub)) {
dataset <- dataset %>% filter(sub %in% subtype)
if (!sub %in% dataset$subtype)
stop("assign a valid practice subtype")
}
if (top == TRUE) {
dataset <- dataset %>% filter(!is.na(top))
if (!top %in% c(TRUE, FALSE))
stop("please input wither TRUE or FALSE. With TRUE argument the top 3 practices are shown")
}
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(site == location,
option == CSA_category,
year >= year_1 & year <= year_2,
practice_type %in% type,
subtype %in% subtype) %>%
# Assign levels to adopted cases
mutate(adopted_cases = factor(adopted_cases, levels = c("Implemented",
"Stopped implementing",
"Know about it",
"Heard about it",
"Never heard about it",
"Accessed and used it",
"Accessed but didn't use it")))%>%
group_by(year, site, practice_type, subtype, gender, n_site) %>%
# Filter out 0 values
filter(n != 0)%>%
filter(adopted_cases == "Implemented" | adopted_cases == "Stopped implementing") %>%
# Create graphic variables
mutate(gender_n = paste(substr(gender,1,1), paste0("(",n_site,")"), sep = "\n"))%>%
arrange(year, site, practice_type, subtype, gender, desc(adopted_cases)) %>%
mutate(pos = cumsum(n) - (0.5 * n)) %>%
group_by(site) %>%
mutate(x = case_when(any(str_detect(gender, "Female"))& gender == "Female"~ 0.6,
any(str_detect(gender, "Female"))& gender == "Male"~ 1.6,
any(!str_detect(gender, "Female"))& gender == "Male"~ 0.6),
xend = case_when(any(str_detect(gender, "Female"))& gender == "Female"~ 1.4,
any(str_detect(gender, "Female"))& gender == "Male"~ 2.4,
any(!str_detect(gender, "Female"))& gender == "Male"~ 1.4))
ggplot(dat,
aes(fill = adopted_cases, y = n, x = gender_n)) +
geom_bar(position="stack", stat="identity", alpha = 0.8)+
geom_label_repel(data = dat,
aes(label = paste0(round(percentage,0),"%"),
x = gender_n,
y = pos,
color = adopted_cases),
show.legend=F,
size = 2.5,
alpha = 0.8,
force = 0.1,
box.padding = 0.1,
direction = "x",
max.overlaps = Inf,
fill = "white")+
geom_segment(data = dat,
aes(x = x,
xend = xend,
y = n_site,
yend = n_site),
linetype=2, color = "#B8B7B3")+
facet_nested(year ~ practice_type + subtype, scales = "free_x", space = "free_x") +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("#9ACD32", "#C67171", "#b5b0b0","#CDC9C9", "#E6E1E1"))+
scale_color_manual(values = c("#9ACD32", "#C67171",  "#b5b0b0","#CDC9C9", "#E6E1E1"))+
# Optional fills
#scale_fill_OkabeIto(order = c(3,4, 1,2))+
#scale_fill_hue(l = 70, c = 45, h = c(95,360))+
#scale_color_hue(l = 70, c = 45, h = c(95,360))+
guides(fill = guide_legend(override.aes = list(size = 7),
title.position = "bottom",
title = ifelse(dat$option == "Practices",
"* Greyscale: not implemented", "")))+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional background colors like in the dashboard
#panel.background = element_rect(fill = "#faf9f5", color = "#ECEBE7", size = 1 ),
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
strip.background = element_rect(fill = "#ECEBE7", color = "#ECEBE7"),
strip.text.x = element_text(margin = margin(1.5,0,1.5,0, "mm"), size = 10, color = "#5D5C58"),
strip.text.y = element_text(margin = margin(0,1.5,0,1.5, "mm"), size = 10, color = "#5D5C58"),
legend.title = element_text(size = 7, margin = margin(5,0,0,0, "mm")),
legend.key.size = unit(1.5, 'lines'),
legend.justification = "top",
legend.position = "left",
legend.text = element_text(size = 9, color = "#5D5C58"),
axis.title = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 9, color = "#B8B7B3", vjust = -2),
plot.margin=unit(c(5,10,10,5), "mm"))
}
p_barplot_2 <- f_barplot_2(CSA_category = "Practices", year_1 = 2018, year_2 = 2021, location = "Doyogena", type = c("Agroforestry", "Improved varieties"), sub = c("Agroforestry fallow", "Pest/disease tolerant"))
p_barplot_2 <- f_barplot_2(CSA_category = "Practices", year_1 = 2018, year_2 = 2021, location = "Doyogena", type = c("Agroforestry", "Improved varieties")))
f_barplot_2 <- function(dataset = uptake_dat, CSA_category, location, type = uptake_dat$practice_type,
subtype = uptake_dat$subtype,  year_1, year_2, top = FALSE){
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(ggh4x)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (location != dataset$site)
stop("assign a valid site name as location")
years <- dataset %>% ungroup() %>%
filter(site == location, option == CSA_category, practice_type %in% type, subtype %in% subtype) %>%            select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed site")
if (!missing(type)) {
dataset <- dataset %>% filter(practice_type %in% type)
if (!type %in% dataset$practice_type)
stop("assign a valid practice type")
}
if (!missing(subtype)) {
dataset <- dataset %>% filter(subtype %in% subtype)
if (!subtype %in% dataset$subtype)
stop("assign a valid practice subtype")
}
if (top == TRUE) {
dataset <- dataset %>% filter(!is.na(top))
if (!top %in% c(TRUE, FALSE))
stop("please input wither TRUE or FALSE. With TRUE argument the top 3 practices are shown")
}
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(site == location,
option == CSA_category,
year >= year_1 & year <= year_2,
practice_type %in% type,
subtype %in% subtype) %>%
# Assign levels to adopted cases
mutate(adopted_cases = factor(adopted_cases, levels = c("Implemented",
"Stopped implementing",
"Know about it",
"Heard about it",
"Never heard about it",
"Accessed and used it",
"Accessed but didn't use it")))%>%
group_by(year, site, practice_type, subtype, gender, n_site) %>%
# Filter out 0 values
filter(n != 0)%>%
filter(adopted_cases == "Implemented" | adopted_cases == "Stopped implementing") %>%
# Create graphic variables
mutate(gender_n = paste(substr(gender,1,1), paste0("(",n_site,")"), sep = "\n"))%>%
arrange(year, site, practice_type, subtype, gender, desc(adopted_cases)) %>%
mutate(pos = cumsum(n) - (0.5 * n)) %>%
group_by(site) %>%
mutate(x = case_when(any(str_detect(gender, "Female"))& gender == "Female"~ 0.6,
any(str_detect(gender, "Female"))& gender == "Male"~ 1.6,
any(!str_detect(gender, "Female"))& gender == "Male"~ 0.6),
xend = case_when(any(str_detect(gender, "Female"))& gender == "Female"~ 1.4,
any(str_detect(gender, "Female"))& gender == "Male"~ 2.4,
any(!str_detect(gender, "Female"))& gender == "Male"~ 1.4))
ggplot(dat,
aes(fill = adopted_cases, y = n, x = gender_n)) +
geom_bar(position="stack", stat="identity", alpha = 0.8)+
geom_label_repel(data = dat,
aes(label = paste0(round(percentage,0),"%"),
x = gender_n,
y = pos,
color = adopted_cases),
show.legend=F,
size = 2.5,
alpha = 0.8,
force = 0.1,
box.padding = 0.1,
direction = "x",
max.overlaps = Inf,
fill = "white")+
geom_segment(data = dat,
aes(x = x,
xend = xend,
y = n_site,
yend = n_site),
linetype=2, color = "#B8B7B3")+
facet_nested(year ~ practice_type + subtype, scales = "free_x", space = "free_x") +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("#9ACD32", "#C67171", "#b5b0b0","#CDC9C9", "#E6E1E1"))+
scale_color_manual(values = c("#9ACD32", "#C67171",  "#b5b0b0","#CDC9C9", "#E6E1E1"))+
# Optional fills
#scale_fill_OkabeIto(order = c(3,4, 1,2))+
#scale_fill_hue(l = 70, c = 45, h = c(95,360))+
#scale_color_hue(l = 70, c = 45, h = c(95,360))+
guides(fill = guide_legend(override.aes = list(size = 7),
title.position = "bottom",
title = ifelse(dat$option == "Practices",
"* Greyscale: not implemented", "")))+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional background colors like in the dashboard
#panel.background = element_rect(fill = "#faf9f5", color = "#ECEBE7", size = 1 ),
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
strip.background = element_rect(fill = "#ECEBE7", color = "#ECEBE7"),
strip.text.x = element_text(margin = margin(1.5,0,1.5,0, "mm"), size = 10, color = "#5D5C58"),
strip.text.y = element_text(margin = margin(0,1.5,0,1.5, "mm"), size = 10, color = "#5D5C58"),
legend.title = element_text(size = 7, margin = margin(5,0,0,0, "mm")),
legend.key.size = unit(1.5, 'lines'),
legend.justification = "top",
legend.position = "left",
legend.text = element_text(size = 9, color = "#5D5C58"),
axis.title = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 9, color = "#B8B7B3", vjust = -2),
plot.margin=unit(c(5,10,10,5), "mm"))
}
p_barplot_2 <- f_barplot_2(CSA_category = "Practices", year_1 = 2018, year_2 = 2021, location = "Doyogena", type = c("Agroforestry", "Improved varieties"))
p_barplot_2
library(tidyverse)
library(here)
#Create temporal objects to read compressed data
temp <- tempfile()
tempd <- tempdir()
url_data_1 <- "https://github.com/cmguiob/CSA_Dashboard/raw/main/Data_R/Data_Q1_Q2.zip"
download.file(url_data, temp, mode="wb") ##Download. mode is necessary for windows
url_data <- "https://github.com/cmguiob/CSA_Dashboard/raw/main/Data_R/Data_Q1_Q2.zip"
download.file(url_data, temp, mode="wb") ##Download. mode is necessary for windows
files_names <- list.files(tempd, pattern = "*.csv") #Read csv file names
files_names
url_data <- "https://github.com/cmguiob/CSA_Dashboard/raw/main/Data_R/Data_Q1_Q2.zip"
download.file(url_data, temp, mode="wb") ##Download. mode is necessary for windows
unzip(temp, exdir=tempd) #Unzip in temporal directory
files_names <- list.files(tempd, pattern = "*.csv") #Read csv file names
files_names
files_names <- list.files(tempd, pattern = "Q1*.csv") #Read csv file names
files_names <- list.files(tempd, pattern = "^Q1*.csv") #Read csv file names
files_names <- list.files(tempd, pattern = "[Q1]") #Read csv file names
files_names
files_names <- list.files(tempd, pattern = "[Q1]*") #Read csv file names
files_names <- list.files(tempd, pattern = "[Q1]*.csv") #Read csv file names
files_names
files_names <- list.files(tempd, pattern = "[Q\d1]*.csv") #Read csv file names
files_names <- list.files(tempd, pattern = "Q1") #Read csv file names
file_names
files_names
files_names_1 <- list.files(tempd, pattern = "Q1") #Read csv file names
files_paths_1 <- paste(file.path(tempd), files_names_1[], sep = "\\") #Create paths
files_paths_1
files_names_2 <- list.files(tempd, pattern = "Q2") #Read csv file names
files_paths_2 <- paste(file.path(tempd), files_names_2[], sep = "\\") #Create paths
files_paths_2
# Define Q1_practices
Q1_practices <- read_csv(files_paths_1[1]) %>%
select(location_type,
location_name,
farmer_id,
gender = farmer_gender,
year,
practice_type,
subtype,
adopted_cases) %>%
pivot_wider(names_from = location_type, values_from = location_name) %>%
unchop(everything()) %>%
mutate(option = "Practices",
farmer_id = case_when(
farmer_id == "337a45e573817fba21d251ecc3a37523e14cc62d073" &
gender == "Female" ~ "337a45e573817fba21d251ecc3a37523e14cc62d073_F",
farmer_id == "3e2a4c557a0a5277638e42df23b17bd63eb41858faa" &
gender == "Female" ~ "3e2a4c557a0a5277638e42df23b17bd63eb41858faa_F",
farmer_id == "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0" &
gender == "Female" ~ "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0_F",
farmer_id == "533a330570d0a9e20fdd55e40993645a7c9838e11b0" &
gender == "Female" ~ "533a330570d0a9e20fdd55e40993645a7c9838e11b0_F",
farmer_id == "27fa75957420473f9ad14deb5ed9b7701031f701149" &
gender == "Female" ~ "27fa75957420473f9ad14deb5ed9b7701031f701149_F",
farmer_id == "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e" &
gender == "Female" ~ "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e_F",
farmer_id == "112a7c157220d8de79f29b9ac7bf6af20daa0a05983" &
gender == "Female" ~ "112a7c157220d8de79f29b9ac7bf6af20daa0a05983_F",
farmer_id == "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b" &
gender == "Female" ~ "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b_F",
TRUE ~ farmer_id),
practice_type = str_to_sentence(practice_type),
gender = str_to_sentence(gender))
# Define Q1_services
Q1_services <- read_csv(files_paths_1[2]) %>%
select(location_type,
location_name,
farmer_id,
gender = farmer_gender,
year,
practice_type,
subtype,
adopted_cases) %>%
pivot_wider(names_from = location_type, values_from = location_name) %>%
unchop(everything()) %>%
mutate(option = "Services",
farmer_id = case_when(
farmer_id == "337a45e573817fba21d251ecc3a37523e14cc62d073" &
gender == "Female" ~ "337a45e573817fba21d251ecc3a37523e14cc62d073_F",
farmer_id == "3e2a4c557a0a5277638e42df23b17bd63eb41858faa" &
gender == "Female" ~ "3e2a4c557a0a5277638e42df23b17bd63eb41858faa_F",
farmer_id == "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0" &
gender == "Female" ~ "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0_F",
farmer_id == "533a330570d0a9e20fdd55e40993645a7c9838e11b0" &
gender == "Female" ~ "533a330570d0a9e20fdd55e40993645a7c9838e11b0_F",
farmer_id == "27fa75957420473f9ad14deb5ed9b7701031f701149" &
gender == "Female" ~ "27fa75957420473f9ad14deb5ed9b7701031f701149_F",
farmer_id == "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e" &
gender == "Female" ~ "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e_F",
farmer_id == "112a7c157220d8de79f29b9ac7bf6af20daa0a05983" &
gender == "Female" ~ "112a7c157220d8de79f29b9ac7bf6af20daa0a05983_F",
farmer_id == "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b" &
gender == "Female" ~ "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b_F",
TRUE ~ farmer_id),
practice_type = str_to_sentence(practice_type),
gender = str_to_sentence(gender))
# Define Q2 practices
Q2_practices <- read_csv(files_paths_2[1]) %>%
select(year,
site,
farmer_id,
gender = farmer_gender,
practice_type,
outcome_category,
indicator,
answer) %>%
mutate(option = "Practices",
practice_type = str_to_sentence(practice_type),
indicator = case_when(
indicator == "CSA option increased production" ~ "Increased production",
indicator == "CSA driven decrease in vulnerability" ~
"Reduced climate vulner.",
indicator == "Decreased agricultural labour time" ~ "Decreased labour time",
indicator == "Increased agricultural labour time" ~ "Increased labour time",
indicator == "Participation on use of CSA income" ~
"Participated on CSA-income use",
TRUE ~ indicator),
gender = str_to_sentence(gender))
# Define Q2_services
Q2_services <-  read_csv(files_paths_2[2]) %>%
select(year,
site,
farmer_id,
gender = farmer_gender,
practice_type = service_type,
outcome_category,
indicator,
answer) %>%
mutate(option = "Services",
practice_type = str_to_sentence(practice_type),
gender = str_to_sentence(gender))
View(Q2_services)
# Number of farmers by gender that implemented practices at each site
n_site_practices <- Q1_practices %>%
filter(!is.na(gender)) %>%
filter(adopted_cases == "Implemented") %>%
select(site, gender, farmer_id) %>%
group_by(site, gender) %>%
distinct(farmer_id) %>%
summarise(n_site = n()) %>%
ungroup()
# Number of farmers by gender that implemented practices at each site
n_site_implemented <- Q1_practices %>%
filter(!is.na(gender)) %>%
filter(adopted_cases == "Implemented") %>%
select(site, gender, farmer_id) %>%
group_by(site, gender) %>%
distinct(farmer_id) %>%
summarise(n_site = n()) %>%
ungroup()
View(n_site_implemented)
# Percentage of farmers that implemented practices who answered "yes" to the indicators
per_yes_practice <- Q2_practices %>%
filter(answer == "yes")  %>%
select(year,
site,
farmer_id,
gender,
outcome_category,
practice_type,
indicator) %>%
group_by(year,
site,
outcome_category,
practice_type,
indicator,
gender) %>%
distinct() %>%
count() %>%
ungroup() %>%
left_join(n_site_implemented, by = c("site", "gender")) %>%
mutate(percentage = round(n*100/n_site,1))
# Number of farmers by gender that accessed and used services at each site
n_site_used <- Q1_services %>%
filter(!is.na(gender)) %>%
filter(adopted_cases == "Accessed and used it") %>%
select(site, gender, farmer_id) %>%
group_by(site, gender) %>%
distinct(farmer_id) %>%
summarise(n_site = n()) %>%
ungroup()
effect_services <- Q2_services %>%
filter(answer == "yes")  %>%
filter(practice_type != "No service") %>%
select(year, site, farmer_id, gender, outcome_category, practice_type, indicator) %>%
group_by(year,
site,
outcome_category,
practice_type,
indicator,
gender) %>%
distinct() %>%
count() %>%
ungroup() %>%
left_join(n_site_used, by = c("site", "gender")) %>%
mutate(percentage = round(n*100/n_site,1))
effect_services <- Q2_services %>%
filter(answer == "yes")  %>%
filter(practice_type != "No service") %>%
select(year, site, farmer_id, gender, outcome_category, practice_type, indicator) %>%
group_by(year,
site,
outcome_category,
practice_type,
indicator,
gender) %>%
distinct() %>%
count() %>%
ungroup() %>%
left_join(n_site_used, by = c("site", "gender")) %>%
mutate(percentage = round(n*100/n_site,1))
# Percentage of farmers that implemented practices who answered "yes" to the indicators
effects_practice <- Q2_practices %>%
filter(answer == "yes")  %>%
select(year,
site,
farmer_id,
gender,
outcome_category,
practice_type,
indicator) %>%
group_by(year,
site,
outcome_category,
practice_type,
indicator,
gender) %>%
distinct() %>%
count() %>%
ungroup() %>%
left_join(n_site_implemented, by = c("site", "gender")) %>%
mutate(percentage = round(n*100/n_site,1))
View(effect_services)
View(effects_practice)
effect_dat <- bind_rows(effect_practices %>% mutate(option = "Practices"),
effect_services %>% mutate(option = "Services") )
# Percentage of farmers that implemented practices who answered "yes" to the indicators
effect_practices <- Q2_practices %>%
filter(answer == "yes")  %>%
select(year,
site,
farmer_id,
gender,
outcome_category,
practice_type,
indicator) %>%
group_by(year,
site,
outcome_category,
practice_type,
indicator,
gender) %>%
distinct() %>%
count() %>%
ungroup() %>%
left_join(n_site_implemented, by = c("site", "gender")) %>%
mutate(percentage = round(n*100/n_site,1))
effect_dat <- bind_rows(effect_practices %>% mutate(option = "Practices"),
effect_services %>% mutate(option = "Services") )
View(effect_dat)
# Write a compressed csv file
write_csv(effect_dat, here::here("PBI","Data_PBI","effects.csv"))
