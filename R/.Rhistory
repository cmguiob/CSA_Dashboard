select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
if (!missing(CSA_option)) {
dataset <- dataset %>% filter(practice_type %in% CSA_option)
if (!CSA_option %in% dataset$practice_type)
stop("assign a valid CSA option for the selected location and year")
}
library(ggalluvial)
# Prepare data for ggalluvial
dat_ggal <-  dataset %>%
select(year,
location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name == location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
#filter(!is.na(drivers)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct() %>%
count(location_gender, exposure_weather, adopted_cases, drivers, practice_type)
# Plot alluvial
ggplot(data = dat_ggal %>% filter(n>5),
aes(y = n,
axis1 = location_gender,
axis2 = exposure_weather,
axis3 = adoption_gender,
axis4 = drivers,
axis5 = practice_type)) +
geom_flow(aes(fill = location_gender),
color = "white",
size = 0.3,
#aes.flow = "backward",
width = 1/15) + #or geom_flow?
geom_stratum(width = 0.07, fill = "#B8B7B3",  alpha = 0.7, color = "#faf9f5", size = 0.8) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 3)+
scale_x_continuous(breaks = 1:5,
labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
scale_fill_hue(l = 70, c = 45, h = c(45, 240))+
labs(caption = "*Flow's width at each category (see labels at the bottom) represents the number of replies from farmers.")+
theme_minimal()+
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3", #this is 0.2 darkened
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.caption = element_text(size = 7, hjust = 0.95, margin = margin(10,0,2,0, "mm")),
plot.margin=unit(c(0,10,0,10), "mm"))
}
p_alluvial <- f_ggalluvial(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation"))
p_alluvial
f_ggalluvial <- function(dataset = trends_dat, location, CSA_category, year_1, year_2,
CSA_option = trends_dat$practice_type){
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% dataset$location_name)
stop("assign a valid value to location")
years <- dataset %>%
filter(location_name %in% location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
if (!missing(CSA_option)) {
dataset <- dataset %>% filter(practice_type %in% CSA_option)
if (!CSA_option %in% dataset$practice_type)
stop("assign a valid CSA option for the selected location and year")
}
library(ggalluvial)
# Prepare data for ggalluvial
dat_ggal <-  dataset %>%
select(year,
location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name == location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
#filter(!is.na(drivers)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct() %>%
count(location_gender, exposure_weather, adoption_gender, drivers, practice_type)
# Plot alluvial
ggplot(data = dat_ggal %>% filter(n>5),
aes(y = n,
axis1 = location_gender,
axis2 = exposure_weather,
axis3 = adoption_gender,
axis4 = drivers,
axis5 = practice_type)) +
geom_flow(aes(fill = location_gender),
color = "white",
size = 0.3,
#aes.flow = "backward",
width = 1/15) + #or geom_flow?
geom_stratum(width = 0.07, fill = "#B8B7B3",  alpha = 0.7, color = "#faf9f5", size = 0.8) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 3)+
scale_x_continuous(breaks = 1:5,
labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
scale_fill_hue(l = 70, c = 45, h = c(45, 240))+
labs(caption = "*Flow's width at each category (see labels at the bottom) represents the number of replies from farmers.")+
theme_minimal()+
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3", #this is 0.2 darkened
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.caption = element_text(size = 7, hjust = 0.95, margin = margin(10,0,2,0, "mm")),
plot.margin=unit(c(0,10,0,10), "mm"))
}
p_alluvial <- f_ggalluvial(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation"))
p_alluvial
# Export
#ggsave(file = "p_sankey.png", plot = p_sankey, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
f_ggalluvial <- function(dataset = trends_dat, location, CSA_category, year_1, year_2,
CSA_option = trends_dat$practice_type){
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% dataset$location_name)
stop("assign a valid value to location")
years <- dataset %>%
filter(location_name %in% location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
if (!missing(CSA_option)) {
dataset <- dataset %>% filter(practice_type %in% CSA_option)
if (!CSA_option %in% dataset$practice_type)
stop("assign a valid CSA option for the selected location and year")
}
library(ggalluvial)
# Prepare data for ggalluvial
dat_ggal <-  dataset %>%
select(year,
location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name == location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
#filter(!is.na(drivers)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct() %>%
count(location_gender, exposure_weather, adoption_gender, drivers, practice_type)
# Plot alluvial
ggplot(data = dat_ggal %>% filter(n>5),
aes(y = n,
axis1 = location_gender,
axis2 = exposure_weather,
axis3 = adoption_gender,
axis4 = drivers,
axis5 = practice_type)) +
geom_flow(aes(fill = location_gender),
color = "white",
size = 0.3,
#aes.flow = "backward",
width = 1/15) + #or geom_flow?
geom_stratum(width = 0.07, fill = "#B8B7B3",  alpha = 0.7, color = "#faf9f5", size = 0.8) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 3)+
scale_x_continuous(breaks = 1:5,
labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
scale_fill_hue(l = 70, c = 45, h = c(45, 240))+
labs(caption = "*Flow's width at each category (see labels at the bottom) represents the number of replies from farmers. n<5 are ignored")+
theme_minimal()+
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3", #this is 0.2 darkened
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.caption = element_text(size = 7, hjust = 0.95, margin = margin(10,0,2,0, "mm")),
plot.margin=unit(c(0,10,0,10), "mm"))
}
p_alluvial <- f_ggalluvial(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation"))
p_alluvial
# Export
#ggsave(file = "p_sankey.png", plot = p_sankey, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
f_ggsankey <- function(dataset = trends_dat, location, CSA_category, year_1, year_2,
CSA_option = trends_dat$practice_type){
library(tidyverse)
library(ggsankey)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% dataset$location_name)
stop("assign a valid value to location")
years <- dataset %>%
filter(location_name %in% location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
if (!missing(CSA_option)) {
dataset <- dataset %>% filter(practice_type %in% CSA_option)
if (!CSA_option %in% dataset$practice_type)
stop("assign a valid CSA option for the selected location and year")
}
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name %in% location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.4,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 2.5,
color = "#5D5C58",
#family = "Calibri", #used in dashboard
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 65, c = 40, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional code to use plot background like in the dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.caption = element_text(size = 12, hjust = 0.95, margin = margin(10,0,2,0, "mm")),
plot.margin=unit(c(0,0,0,0), "mm")) # plot.margin=unit(c(0,0,4,-30), "mm") on dashboard
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation"))
p_sankey
# Export
#ggsave(file = "p_sankey.png", plot = p_sankey, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation"))
f_ggalluvial <- function(dataset = trends_dat, location, CSA_category, year_1, year_2,
CSA_option = trends_dat$practice_type){
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% dataset$location_name)
stop("assign a valid value to location")
years <- dataset %>%
filter(location_name %in% location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
if (!missing(CSA_option)) {
dataset <- dataset %>% filter(practice_type %in% CSA_option)
if (!CSA_option %in% dataset$practice_type)
stop("assign a valid CSA option for the selected location and year")
}
library(ggalluvial)
# Prepare data for ggalluvial
dat_ggal <-  dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name == location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct() %>%
count(location_gender, exposure_weather, adoption_gender, drivers, practice_type)
# Plot alluvial
ggplot(data = dat_ggal %>% filter(n>5),
aes(y = n,
axis1 = location_gender,
axis2 = exposure_weather,
axis3 = adoption_gender,
axis4 = drivers,
axis5 = practice_type)) +
geom_flow(aes(fill = location_gender),
color = "white",
size = 0.3,
width = 1/15) +
geom_stratum(width = 0.07, fill = "#B8B7B3",  alpha = 0.7, color = "#faf9f5", size = 0.8) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 2.5, color = "#5D5C58")+
scale_x_continuous(breaks = 1:5,
labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
scale_fill_hue(l = 70, c = 45, h = c(45, 240))+
labs(caption = "*Flow's width at each category (see labels at the bottom) represents the number of replies from farmers. n<5 are ignored")+
theme_minimal()+
theme(panel.grid = element_blank(),
# Option to use background color as in dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.caption = element_text(size = 7, hjust = 0.95, margin = margin(10,0,2,0, "mm")),
plot.margin=unit(c(0,10,0,10), "mm"))
}
p_alluvial <- f_ggalluvial(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation"))
p_alluvial
# Export
#ggsave(file = "p_alluvial.png", plot = p_alluvial, device = "png", type = "cairo", path = "Input a path from your PC", dpi = 300, width = 9.5, height = 5)
f_ggsankey <- function(dataset = trends_dat, location, CSA_category, year_1, year_2,
CSA_option = trends_dat$practice_type){
library(tidyverse)
library(ggsankey)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% dataset$location_name)
stop("assign a valid value to location")
years <- dataset %>%
filter(location_name %in% location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
if (!missing(CSA_option)) {
dataset <- dataset %>% filter(practice_type %in% CSA_option)
if (!CSA_option %in% dataset$practice_type)
stop("assign a valid CSA option for the selected location and year")
}
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name %in% location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.4,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 2.5,
color = "#5D5C58",
#family = "Calibri", #used in dashboard
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 65, c = 40, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional code to use plot background like in the dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.caption = element_text(size = 12, hjust = 0.95, margin = margin(10,0,2,0, "mm")),
plot.margin=unit(c(0,0,0,0), "mm")) # plot.margin=unit(c(0,0,4,-30), "mm") on dashboard
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation"))
