p_map
# Export
#ggsave(file = "p_map.png", plot = p_map, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
f_textbox <- function(dataset = uptake_dat, sub){
if (!sub %in% dataset$subtype)
stop("assign a valid practice subtype")
library(ggplot2)
library(ggtext)
library(tidyverse)
library(grid)
ggplot(data = dataset %>% filter(subtype == sub)) +
geom_textbox(
aes(x = 0.01,
y = 1,
label = description),
width = grid::unit(0.9, "npc"), # 73% of plot panel width
hjust = 0,
vjust = 1,
fill = "#faf9f5",
colour = "#5D5C58",
size = 5,
box.colour = "#faf9f5") +
xlim(0, 1) +
ylim(0, 1) +
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5",
color = "#faf9f5"),
axis.title = element_blank(),
axis.text = element_blank())
}
f_map <- function(dataset = uptake_dat, CSA_category, type, subtype, year_1, year_2, location = uptake_dat$site){
library(ggplot2)
library(tidyverse)
library(ggrepel)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!type %in% dataset$practice_type)
stop("assign a valid practice type")
if (!subtype %in% dataset$subtype)
stop("assign a valid practice subtype")
dataset <- dataset %>%
filter(option == CSA_category,
year >= year_1 & year <= year_2 ,
practice_type == type,
subtype == subtype)
if (!missing(location)) {
dataset <- dataset %>% filter(site %in% location)
if (!location %in% dataset$site)
stop("assign a valid site name as location")
}
world_data <- ggplot2::map_data('world')%>%
rename(country = region) %>%
select(-subregion) %>%
filter(country %in% dataset$country)
ggplot(data = world_data,
aes(x = long,
y = lat)) +
geom_polygon(data = world_data,
aes(group = group),
color = "#faf9f5",
fill = "#ECEBE7",
size = 1) +
geom_point(data = dataset,
aes(x = longitude_site,
y = latitude_site),
shape = 19,
size = 3,
alpha = 0.8,
color = "#B8B7B3") +
geom_text_repel(data = dataset %>%
ungroup() %>%
distinct(site, .keep_all = TRUE),
aes(label = site,
x = longitude_site,
y = latitude_site),
size = 5,
fontface = "bold",
box.padding = 0.1,
point.padding = 0.1,
nudge_y = 0,
max.overlaps = Inf,
direction = "both",
xlim = c(-Inf, Inf),
alpha = 0.5) +
guides(color = "none")+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional background color as in dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
axis.text = element_blank(),
axis.title = element_blank(),
plot.margin=unit(c(0,20,0,20), "mm"))+
coord_quickmap(clip = "off")
}
p_map <- f_map(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", year_1 = 2019, year_2 = 2021, location = c("Kaffrine", "Hoima"))
p_map
# Export
#ggsave(file = "p_map.png", plot = p_map, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
f_textbox <- function(dataset = uptake_dat, sub){
if (!sub %in% dataset$subtype)
stop("assign a valid practice subtype")
library(ggplot2)
library(ggtext)
library(tidyverse)
library(grid)
ggplot(data = dataset %>% filter(subtype == sub)) +
geom_textbox(
aes(x = 0.01,
y = 1,
label = description),
width = grid::unit(0.9, "npc"), # 73% of plot panel width
hjust = 0,
vjust = 1,
fill = "#faf9f5",
colour = "#5D5C58",
size = 8,
box.colour = "#faf9f5") +
xlim(0, 1) +
ylim(0, 1) +
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5",
color = "#faf9f5"),
axis.title = element_blank(),
axis.text = element_blank())
}
p_textbox <- f_textbox(sub = "Tree planting")
p_textbox
# Export
#ggsave(file = "p_textbox.png", plot = p_map, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
f_ggsankey <- function(dataset = trends_dat, location, CSA_category, year_1, year_2,
CSA_option = trends_dat$practice_type){
library(tidyverse)
library(ggsankey)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% dataset$location_name)
stop("assign a valid value to location")
years <- dataset %>%
filter(location_name %in% location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
if (!missing(CSA_option)) {
dataset <- dataset %>% filter(practice_type %in% CSA_option)
if (!CSA_option %in% dataset$practice_type)
stop("assign a valid CSA option for the selected location and year")
}
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name %in% location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.5,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 2.5,
color = "#5D5C58",
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 70, c = 45, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional code to use plot background like in the dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank())
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation"))
p_sankey
# Export
#ggsave(file = "p_sankey.png", plot = p_sankey, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
View(trends_dat)
trends_dat <- filter(trends_dat, location != "Region")
View(trends_dat)
trends_dat <- filter(trends_dat, location_type != "Region")
trends_dat <- filter(trends_dat, location_type == "Site")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
#Create temporal objects to read compressed data
temp <- tempfile()
tempd <- tempdir()
url_data <- "https://github.com/cmguiob/CSA_Dashboard/raw/main/Data_R/Data_Q1_Q2.zip"
unzip(temp, exdir=tempd) #Unzip in temporal directory
files_names <- list.files(tempd, pattern = "Q1") #Read csv file names
files_paths <- paste(file.path(tempd), files_names[], sep = "\\") #Create paths
Q1_practices <- read_csv(files_paths[1]) %>%
select(year,
location_type,
location_name,
farmer_id,
gender = farmer_gender,
practice_type,
exposure_weather,
adopted_cases,
drivers) %>%
filter(!is.na(drivers)) %>%
mutate(option = "Practices",
# Correct farmer_id which have two genders
farmer_id = case_when(
farmer_id == "337a45e573817fba21d251ecc3a37523e14cc62d073" &
gender == "Female" ~ "337a45e573817fba21d251ecc3a37523e14cc62d073_F",
farmer_id == "3e2a4c557a0a5277638e42df23b17bd63eb41858faa" &
gender == "Female" ~ "3e2a4c557a0a5277638e42df23b17bd63eb41858faa_F",
farmer_id == "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0" &
gender == "Female" ~ "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0_F",
farmer_id == "533a330570d0a9e20fdd55e40993645a7c9838e11b0" &
gender == "Female" ~ "533a330570d0a9e20fdd55e40993645a7c9838e11b0_F",
farmer_id == "27fa75957420473f9ad14deb5ed9b7701031f701149" &
gender == "Female" ~ "27fa75957420473f9ad14deb5ed9b7701031f701149_F",
farmer_id == "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e" &
gender == "Female" ~ "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e_F",
farmer_id == "112a7c157220d8de79f29b9ac7bf6af20daa0a05983" &
gender == "Female" ~ "112a7c157220d8de79f29b9ac7bf6af20daa0a05983_F",
farmer_id == "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b" &
gender == "Female" ~ "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b_F",
TRUE ~ farmer_id),
practice_type = str_to_sentence(practice_type),
location_type = str_to_sentence(location_type),
gender = str_to_sentence(gender)) %>%
mutate_if(is.character,as.factor)
Q1_services <- read_csv(files_paths[2]) %>%
select(year,
location_type,
location_name,
farmer_id,
gender = farmer_gender,
practice_type,
subtype,
exposure_weather,
adopted_cases,
drivers) %>%
# Remove rows for cases where driver is NA (adopted_case is HEARD about it)
filter(!is.na(drivers)) %>%
filter(subtype != "No service") %>%
mutate(option = "Services",
farmer_id = case_when(
farmer_id == "337a45e573817fba21d251ecc3a37523e14cc62d073" &
gender == "Female" ~ "337a45e573817fba21d251ecc3a37523e14cc62d073_F",
farmer_id == "3e2a4c557a0a5277638e42df23b17bd63eb41858faa" &
gender == "Female" ~ "3e2a4c557a0a5277638e42df23b17bd63eb41858faa_F",
farmer_id == "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0" &
gender == "Female" ~ "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0_F",
farmer_id == "533a330570d0a9e20fdd55e40993645a7c9838e11b0" &
gender == "Female" ~ "533a330570d0a9e20fdd55e40993645a7c9838e11b0_F",
farmer_id == "27fa75957420473f9ad14deb5ed9b7701031f701149" &
gender == "Female" ~ "27fa75957420473f9ad14deb5ed9b7701031f701149_F",
farmer_id == "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e" &
gender == "Female" ~ "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e_F",
farmer_id == "112a7c157220d8de79f29b9ac7bf6af20daa0a05983" &
gender == "Female" ~ "112a7c157220d8de79f29b9ac7bf6af20daa0a05983_F",
farmer_id == "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b" &
gender == "Female" ~ "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b_F",
TRUE ~ farmer_id),
practice_type = str_to_sentence(paste0(practice_type,"\n", "(",subtype, ")")),
location_type = str_to_sentence(location_type),
gender = str_to_sentence(gender))%>%
mutate_if(is.character,as.factor) %>%
select(-subtype)
trends_dat <- bind_rows(Q1_practices, Q1_services) %>%  filter(location_type == "Site")
# Remove all objects but coordinates summ
rm(list =setdiff(ls(), "trends_dat"))
# Write a compressed csv file
write_csv(trends_dat, here::here("PBI","Data_PBI","trends.csv"))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
f_ggsankey <- function(dataset = trends_dat, location, CSA_category, year_1, year_2,
CSA_option = trends_dat$practice_type){
library(tidyverse)
library(ggsankey)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% dataset$location_name)
stop("assign a valid value to location")
years <- dataset %>%
filter(location_name %in% location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
if (!missing(CSA_option)) {
dataset <- dataset %>% filter(practice_type %in% CSA_option)
if (!CSA_option %in% dataset$practice_type)
stop("assign a valid CSA option for the selected location and year")
}
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name %in% location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.5,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 2.5,
color = "#5D5C58",
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 70, c = 45, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional code to use plot background like in the dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank())
}
#Create temporal objects to read compressed data
temp <- tempfile()
tempd <- tempdir()
url_data <- "https://github.com/cmguiob/CSA_Dashboard/raw/main/Data_R/Data_Q1_Q2.zip"
download.file(url_data, temp, mode="wb") ##Download. mode is necessary for windows
unzip(temp, exdir=tempd) #Unzip in temporal directory
files_names <- list.files(tempd, pattern = "Q1") #Read csv file names
files_paths <- paste(file.path(tempd), files_names[], sep = "\\") #Create paths
# ------------------------- Prepare data ----------------------------------------
Q1_practices <- read_csv(files_paths[1]) %>%
select(year,
location_type,
location_name,
farmer_id,
gender = farmer_gender,
practice_type,
exposure_weather,
adopted_cases,
drivers) %>%
filter(!is.na(drivers)) %>%
mutate(option = "Practices",
# Correct farmer_id which have two genders
farmer_id = case_when(
farmer_id == "337a45e573817fba21d251ecc3a37523e14cc62d073" &
gender == "Female" ~ "337a45e573817fba21d251ecc3a37523e14cc62d073_F",
farmer_id == "3e2a4c557a0a5277638e42df23b17bd63eb41858faa" &
gender == "Female" ~ "3e2a4c557a0a5277638e42df23b17bd63eb41858faa_F",
farmer_id == "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0" &
gender == "Female" ~ "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0_F",
farmer_id == "533a330570d0a9e20fdd55e40993645a7c9838e11b0" &
gender == "Female" ~ "533a330570d0a9e20fdd55e40993645a7c9838e11b0_F",
farmer_id == "27fa75957420473f9ad14deb5ed9b7701031f701149" &
gender == "Female" ~ "27fa75957420473f9ad14deb5ed9b7701031f701149_F",
farmer_id == "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e" &
gender == "Female" ~ "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e_F",
farmer_id == "112a7c157220d8de79f29b9ac7bf6af20daa0a05983" &
gender == "Female" ~ "112a7c157220d8de79f29b9ac7bf6af20daa0a05983_F",
farmer_id == "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b" &
gender == "Female" ~ "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b_F",
TRUE ~ farmer_id),
practice_type = str_to_sentence(practice_type),
location_type = str_to_sentence(location_type),
gender = str_to_sentence(gender)) %>%
mutate_if(is.character,as.factor)
Q1_services <- read_csv(files_paths[2]) %>%
select(year,
location_type,
location_name,
farmer_id,
gender = farmer_gender,
practice_type,
subtype,
exposure_weather,
adopted_cases,
drivers) %>%
# Remove rows for cases where driver is NA (adopted_case is HEARD about it)
filter(!is.na(drivers)) %>%
filter(subtype != "No service") %>%
mutate(option = "Services",
farmer_id = case_when(
farmer_id == "337a45e573817fba21d251ecc3a37523e14cc62d073" &
gender == "Female" ~ "337a45e573817fba21d251ecc3a37523e14cc62d073_F",
farmer_id == "3e2a4c557a0a5277638e42df23b17bd63eb41858faa" &
gender == "Female" ~ "3e2a4c557a0a5277638e42df23b17bd63eb41858faa_F",
farmer_id == "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0" &
gender == "Female" ~ "4e6a1f557611aec6b347a05cde3a1e093fb88e883a0_F",
farmer_id == "533a330570d0a9e20fdd55e40993645a7c9838e11b0" &
gender == "Female" ~ "533a330570d0a9e20fdd55e40993645a7c9838e11b0_F",
farmer_id == "27fa75957420473f9ad14deb5ed9b7701031f701149" &
gender == "Female" ~ "27fa75957420473f9ad14deb5ed9b7701031f701149_F",
farmer_id == "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e" &
gender == "Female" ~ "a75acb457efe9fb18b082f3a52d2dad46a69a42cf8e_F",
farmer_id == "112a7c157220d8de79f29b9ac7bf6af20daa0a05983" &
gender == "Female" ~ "112a7c157220d8de79f29b9ac7bf6af20daa0a05983_F",
farmer_id == "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b" &
gender == "Female" ~ "fd7a65f575e4ac103cbe3b6832d559cbc199d82101b_F",
TRUE ~ farmer_id),
practice_type = str_to_sentence(paste0(practice_type,"\n", "(",subtype, ")")),
location_type = str_to_sentence(location_type),
gender = str_to_sentence(gender))%>%
mutate_if(is.character,as.factor) %>%
select(-subtype)
trends_dat <- bind_rows(Q1_practices, Q1_services) %>%  filter(location_type == "Site" | location_type == "Country" | )
trends_dat <- bind_rows(Q1_practices, Q1_services) %>%  filter(location_type == "Site" | location_type == "Country" )
