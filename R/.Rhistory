country == "HND" ~ mean(long),
country == "MLI" ~ mean(long),
country == "NPL" ~ mean(long),
country == "NIC" ~ mean(long),
country == "NER" ~ mean(long),
country == "SEN" ~ mean(long),
country == "UGA" ~ mean(long)),
lat =
case_when(country == "BGD" ~ mean(lat),
country == "COL" ~ mean(lat),
country == "ETH" ~ mean(lat),
country == "GHA" ~ mean(lat),
country == "GTM" ~ mean(lat),
country == "HND" ~ mean(lat),
country == "MLI" ~ mean(lat),
country == "NPL" ~ mean(lat),
country == "NIC" ~ mean(lat),
country == "NER" ~ mean(lat),
country == "SEN" ~ mean(lat),
country == "UGA" ~ mean(lat)))
# Plot
ggplot(data = world_data,
aes(x = long,
y = lat)) +
geom_polygon(data = world_data,
aes(group = group),
color = "#faf9f5",
fill = "#ECEBE7",
size = 1) +
#geom_text(data = world_labels,
#          aes(label = country),
#          color = "#B8B7B3",
#          size = 8,
#          face = "bold")+
geom_point(data = dataset2,
aes(x = longitude_site,
y = latitude_site,
size = n,
color = site),
shape = 19,
#size = 6,
alpha = 0.5)+
scale_size_continuous(range = c(7,10))+
scale_color_hue(l = 70, c = 40, h = c(45, 250))+
scale_fill_hue(l = 70, c = 40, h = c(45, 250))+
geom_text_repel(data = dataset2,
aes(label =
if(category == "Years"){
paste0("Years surveyed:\n", details)
}
else if(category == "Communities"){
paste(n, "communities surveyed")
}
else if(category == "Practices"){
paste("Practices assessed:\n",details)
}
else if(category == "Households"){
paste(n,"households surveyed.\n",details)
}
else if(category == "Farmers"){
paste(n,"farmers surveyed.\n",details)
}
else {paste0(n, "% of households had shocks.\n From them:\n",details)},
x = longitude_site,
y = latitude_site,
color = site),
show_guide=F,
size = 3,
#fontface = "bold",
box.padding = if (dataset2$region == "South Asia"){2.5} else {3.5},
force = if (dataset2$region == "Latina America"){3.5}
else if (dataset2$region == "South Asia") {4}
else if (dataset2$region == "West Africa") {3}
else {4},
point.padding = 1.5,
#nudge_y = -0.5,
nudge_x = 0.1,
#color = "#5D5C58",
max.overlaps = Inf,
direction = "both",
xlim = c(-Inf, Inf))+
guides(size = "none",
color = guide_legend(override.aes = list(size = 8)))+
labs(color = "Sites",
caption = if(dataset2$category == "Practices"){"*m = practice has mitigation features, g: gender impact"})+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional to use same background as in dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.text = element_text(size = 11,
color = "#5D5C58"),
legend.title = element_text(size = 11,
color = "#B8B7B3",
face = "bold"),
legend.key.size = unit(1.5, 'lines'),
legend.justification = "top",
legend.position = "bottom",
plot.caption = element_text(size = 7,
hjust = 1,
margin = margin(5,0,5,0, "mm")),
axis.text = element_blank(),
axis.title = element_blank(),
plot.margin = unit(if (dataset2$region == "South Asia"){c(0,20,0,-20)}
else if (dataset2$region == "West Africa"){c(0,15,0,35)}
else {c(0,10,0,15)}, "mm"))+
coord_quickmap(clip = "off")
}
p_locations <- f_locations(regn = "East Africa", countr = "Ethiopia", cat = "Practices")
p_locations
# Export
#ggsave(file = "p_sankey.png", plot = p_sankey, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Uptake_Barplot.R")
f_text <- function(dataset = uptake_dat, subtype){
if (!subtype %in% dataset$subtype)
stop("assign a valid practice subtype")
library(ggplot2)
library(ggtext)
library(tidyverse)
library(grid)
ggplot(data = dataset %>% filter(subtype == subtype)) +
geom_textbox(
aes(x = 0.01,
y = 1,
label = description),
width = grid::unit(0.9, "npc"), # 73% of plot panel width
hjust = 0,
vjust = 1,
fill = "#faf9f5",
colour = "#5D5C58",
size = 8,
box.colour = "#faf9f5") +
xlim(0, 1) +
ylim(0, 1) +
theme_minimal(base_family = "Calibri")+
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5",
color = "#faf9f5"),
axis.title = element_blank(),
axis.text = element_blank())
}
f_textbox <- function(dataset = uptake_dat, subtype){
if (!subtype %in% dataset$subtype)
stop("assign a valid practice subtype")
library(ggplot2)
library(ggtext)
library(tidyverse)
library(grid)
ggplot(data = dataset %>% filter(subtype == subtype)) +
geom_textbox(
aes(x = 0.01,
y = 1,
label = description),
width = grid::unit(0.9, "npc"), # 73% of plot panel width
hjust = 0,
vjust = 1,
fill = "#faf9f5",
colour = "#5D5C58",
size = 8,
box.colour = "#faf9f5") +
xlim(0, 1) +
ylim(0, 1) +
theme_minimal(base_family = "Calibri")+
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5",
color = "#faf9f5"),
axis.title = element_blank(),
axis.text = element_blank())
}
p_textbox <- f_textbox(subtype = "Tree planting")
p_textbox
f_textbox <- function(dataset = uptake_dat, sub){
if (!sub %in% dataset$subtype)
stop("assign a valid practice subtype")
library(ggplot2)
library(ggtext)
library(tidyverse)
library(grid)
ggplot(data = dataset %>% filter(subtype == sub)) +
geom_textbox(
aes(x = 0.01,
y = 1,
label = description),
width = grid::unit(0.9, "npc"), # 73% of plot panel width
hjust = 0,
vjust = 1,
fill = "#faf9f5",
colour = "#5D5C58",
size = 5,
box.colour = "#faf9f5") +
xlim(0, 1) +
ylim(0, 1) +
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5",
color = "#faf9f5"),
axis.title = element_blank(),
axis.text = element_blank())
}
p_textbox <- f_textbox(sub = "Tree planting")
p_textbox
# Export
#ggsave(file = "p_textbox.png", plot = p_map, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
f_map <- function(dataset = uptake_dat, CSA_category, type, subtype, year_1, year_2, location = uptake_dat$site){
library(ggplot2)
library(tidyverse)
library(ggrepel)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!type %in% dataset$practice_type)
stop("assign a valid practice type")
if (!subtype %in% dataset$subtype)
stop("assign a valid practice subtype")
dataset <- dataset %>%
filter(option == CSA_category,
year >= year_1 & year <= year_2 ,
practice_type == type,
subtype == subtype)
if (!missing(location)) {
dataset <- dataset %>% filter(site %in% location)
if (!location %in% dataset$site)
stop("assign a valid site name as location")
}
world_data <- ggplot2::map_data('world')%>%
rename(country = region) %>%
select(-subregion) %>%
filter(country %in% dataset$country)
ggplot(data = world_data,
aes(x = long,
y = lat)) +
geom_polygon(data = world_data,
aes(group = group),
color = "#faf9f5",
fill = "#ECEBE7",
size = 1) +
geom_point(data = dataset,
aes(x = longitude_site,
y = latitude_site),
shape = 19,
size = 3,
alpha = 0.8,
color = "#B8B7B3") +
geom_text_repel(data = dataset %>%
ungroup() %>%
distinct(site, .keep_all = TRUE),
aes(label = site,
x = longitude_site,
y = latitude_site),
size = 8,
fontface = "bold",
box.padding = 0.1,
point.padding = 0.1,
nudge_y = 0,
max.overlaps = Inf,
direction = "both",
xlim = c(-Inf, Inf),
alpha = 0.5) +
guides(color = "none")+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional background color as in dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
axis.text = element_blank(),
axis.title = element_blank(),
plot.margin=unit(c(0,20,0,20), "mm"))+
coord_quickmap(clip = "off")
}
p_map <- f_map(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", year_1 = 2019, year_2 = 2021, location = c("Kaffrine", "Hoima"))
p_map
# Export
#ggsave(file = "p_map.png", plot = p_map, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
f_textbox <- function(dataset = uptake_dat, sub){
if (!sub %in% dataset$subtype)
stop("assign a valid practice subtype")
library(ggplot2)
library(ggtext)
library(tidyverse)
library(grid)
ggplot(data = dataset %>% filter(subtype == sub)) +
geom_textbox(
aes(x = 0.01,
y = 1,
label = description),
width = grid::unit(0.9, "npc"), # 73% of plot panel width
hjust = 0,
vjust = 1,
fill = "#faf9f5",
colour = "#5D5C58",
size = 5,
box.colour = "#faf9f5") +
xlim(0, 1) +
ylim(0, 1) +
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5",
color = "#faf9f5"),
axis.title = element_blank(),
axis.text = element_blank())
}
f_map <- function(dataset = uptake_dat, CSA_category, type, subtype, year_1, year_2, location = uptake_dat$site){
library(ggplot2)
library(tidyverse)
library(ggrepel)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!type %in% dataset$practice_type)
stop("assign a valid practice type")
if (!subtype %in% dataset$subtype)
stop("assign a valid practice subtype")
dataset <- dataset %>%
filter(option == CSA_category,
year >= year_1 & year <= year_2 ,
practice_type == type,
subtype == subtype)
if (!missing(location)) {
dataset <- dataset %>% filter(site %in% location)
if (!location %in% dataset$site)
stop("assign a valid site name as location")
}
world_data <- ggplot2::map_data('world')%>%
rename(country = region) %>%
select(-subregion) %>%
filter(country %in% dataset$country)
ggplot(data = world_data,
aes(x = long,
y = lat)) +
geom_polygon(data = world_data,
aes(group = group),
color = "#faf9f5",
fill = "#ECEBE7",
size = 1) +
geom_point(data = dataset,
aes(x = longitude_site,
y = latitude_site),
shape = 19,
size = 3,
alpha = 0.8,
color = "#B8B7B3") +
geom_text_repel(data = dataset %>%
ungroup() %>%
distinct(site, .keep_all = TRUE),
aes(label = site,
x = longitude_site,
y = latitude_site),
size = 5,
fontface = "bold",
box.padding = 0.1,
point.padding = 0.1,
nudge_y = 0,
max.overlaps = Inf,
direction = "both",
xlim = c(-Inf, Inf),
alpha = 0.5) +
guides(color = "none")+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional background color as in dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
axis.text = element_blank(),
axis.title = element_blank(),
plot.margin=unit(c(0,20,0,20), "mm"))+
coord_quickmap(clip = "off")
}
p_map <- f_map(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", year_1 = 2019, year_2 = 2021, location = c("Kaffrine", "Hoima"))
p_map
# Export
#ggsave(file = "p_map.png", plot = p_map, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
f_textbox <- function(dataset = uptake_dat, sub){
if (!sub %in% dataset$subtype)
stop("assign a valid practice subtype")
library(ggplot2)
library(ggtext)
library(tidyverse)
library(grid)
ggplot(data = dataset %>% filter(subtype == sub)) +
geom_textbox(
aes(x = 0.01,
y = 1,
label = description),
width = grid::unit(0.9, "npc"), # 73% of plot panel width
hjust = 0,
vjust = 1,
fill = "#faf9f5",
colour = "#5D5C58",
size = 8,
box.colour = "#faf9f5") +
xlim(0, 1) +
ylim(0, 1) +
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5",
color = "#faf9f5"),
axis.title = element_blank(),
axis.text = element_blank())
}
p_textbox <- f_textbox(sub = "Tree planting")
p_textbox
# Export
#ggsave(file = "p_textbox.png", plot = p_map, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
f_ggsankey <- function(dataset = trends_dat, location, CSA_category, year_1, year_2,
CSA_option = trends_dat$practice_type){
library(tidyverse)
library(ggsankey)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% dataset$location_name)
stop("assign a valid value to location")
years <- dataset %>%
filter(location_name %in% location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
if (!missing(CSA_option)) {
dataset <- dataset %>% filter(practice_type %in% CSA_option)
if (!CSA_option %in% dataset$practice_type)
stop("assign a valid CSA option for the selected location and year")
}
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name %in% location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.5,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 2.5,
color = "#5D5C58",
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 70, c = 45, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional code to use plot background like in the dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank())
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation"))
p_sankey
# Export
#ggsave(file = "p_sankey.png", plot = p_sankey, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
View(trends_dat)
trends_dat <- filter(trends_dat, location != "Region")
View(trends_dat)
trends_dat <- filter(trends_dat, location_type != "Region")
trends_dat <- filter(trends_dat, location_type == "Site")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
