# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.5,
width = 0.04,
#node.color = "#5D5C58"
)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 3,
color = "#5D5C58",
fontface = "bold",
family = "Calibri",
#hjust = -0.05,
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 70, c = 45, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3", #this is 0.2 darkened
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank())
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021)
p_sankey
# Export
#ggsave(file = "p_sankey.png", plot = p_sankey, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
f_ggsankey <- function(dataset = Q1_options, location, CSA_category, year_1, year_2){
library(tidyverse)
library(ggsankey)
library(extrafont)
font_import()
loadfonts(device = "win", quiet = TRUE)
# Error messages
if (CSA_category != c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% Q1_options$location_name)
stop("assign a valid value to location")
years <- Q1_options %>%
filter(location_name == location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name == location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
filter(practice_type == practice_type) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.5,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 3,
color = "#5D5C58",
fontface = "bold",
family = "Calibri",
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 70, c = 45, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank())
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(here)
source(here::here("R","Prepare_Trends_Sankey.R"))
f_ggsankey <- function(dataset = Q1_options, location, CSA_category, year_1, year_2){
library(tidyverse)
library(ggsankey)
font_import()
loadfonts(device = "win", quiet = TRUE)
# Error messages
if (CSA_category != c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% Q1_options$location_name)
stop("assign a valid value to location")
years <- Q1_options %>%
filter(location_name == location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name == location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
filter(practice_type == practice_type) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.5,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 3,
color = "#5D5C58",
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 70, c = 45, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank())
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021)
f_ggsankey <- function(dataset = Q1_options, location, CSA_category, year_1, year_2){
library(tidyverse)
library(ggsankey)
# Error messages
if (CSA_category != c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% Q1_options$location_name)
stop("assign a valid value to location")
years <- Q1_options %>%
filter(location_name == location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name == location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
filter(practice_type == practice_type) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.5,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 3,
color = "#5D5C58",
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 70, c = 45, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank())
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021)
p_sankey
# Export
#ggsave(file = "p_sankey.png", plot = p_sankey, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
f_ggsankey <- function(dataset = Q1_options, location, CSA_category, year_1, year_2){
library(tidyverse)
library(ggsankey)
# Error messages
if (CSA_category != c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% Q1_options$location_name)
stop("assign a valid value to location")
years <- Q1_options %>%
filter(location_name == location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name == location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
filter(practice_type == practice_type) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.5,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 2.5,
color = "#5D5C58",
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 70, c = 45, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank())
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021)
p_sankey
# Export
#ggsave(file = "p_sankey.png", plot = p_sankey, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
url_coords <- "https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/Data/CSV_coordinates.csv"
coordinates <- read_csv(url_coords)
library(here)
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(here)
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
#source(here::here("R","Prepare_Trends_Sankey.R"))
f_ggsankey <- function(dataset = Q1_options, location, CSA_category, year_1, year_2){
library(tidyverse)
library(ggsankey)
# Error messages
if (CSA_category != c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% Q1_options$location_name)
stop("assign a valid value to location")
years <- Q1_options %>%
filter(location_name == location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name == location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
filter(practice_type == practice_type) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.5,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 2.5,
color = "#5D5C58",
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 70, c = 45, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional code to use plot background like in the dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank())
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021)
p_sankey
# Export
#ggsave(file = "p_sankey.png", plot = p_sankey, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
