#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
axis.text = element_blank(),
axis.title = element_blank(),
plot.margin=unit(c(0,20,0,20), "mm"))+
coord_quickmap(clip = "off")
}
p_map <- f_map(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", year_1 = 2019, year_2 = 2021, location)
p_map <- f_map(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", year_1 = 2019, year_2 = 2021, location)
f_map <- function(dataset = uptake_dat, CSA_category, type, subtype, year_1, year_2, location = uptake_dat$site ){
library(ggplot2)
library(tidyverse)
library(ggrepel)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!type %in% dataset$practice_type)
stop("assign a valid practice type")
if (!subtype %in% dataset$subtype)
stop("assign a valid practice subtype")
dataset <- dataset %>%
filter(option == CSA_category,
year >= year_1 & year <= year_2 ,
practice_type == type,
subtype == subtype)
if (!missing(location)) {dataset <- dataset %>% filter(site == location)}
if (!location %in% dataset$site)
stop("assign a valid site name as location")
world_data <- ggplot2::map_data('world')%>%
rename(country = region) %>%
select(-subregion) %>%
filter(country %in% dataset$country)
ggplot(data = world_data,
aes(x = long,
y = lat)) +
geom_polygon(data = world_data,
aes(group = group),
color = "#faf9f5",
fill = "#ECEBE7",
size = 1) +
geom_point(data = dataset,
aes(x = longitude_site,
y = latitude_site),
shape = 19,
size = 3,
alpha = 0.8,
color = "#B8B7B3") +
geom_text_repel(data = dataset %>%
ungroup() %>%
distinct(site, .keep_all = TRUE),
aes(label = site,
x = longitude_site,
y = latitude_site),
size = 5,
fontface = "bold",
box.padding = 0.1,
point.padding = 0.1,
nudge_y = 0,
max.overlaps = Inf,
direction = "both",
xlim = c(-Inf, Inf),
alpha = 0.5) +
guides(color = "none")+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional background color as in dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
axis.text = element_blank(),
axis.title = element_blank(),
plot.margin=unit(c(0,20,0,20), "mm"))+
coord_quickmap(clip = "off")
}
p_map <- f_map(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", year_1 = 2019, year_2 = 2021, location)
p_map <- f_map(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", year_1 = 2019, year_2 = 2021, location = c("Kaffrine", "Hoima"))
p_map
f_map <- function(dataset = uptake_dat, CSA_category, type, subtype, year_1, year_2, location = uptake_dat$site ){
library(ggplot2)
library(tidyverse)
library(ggrepel)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!type %in% dataset$practice_type)
stop("assign a valid practice type")
if (!subtype %in% dataset$subtype)
stop("assign a valid practice subtype")
dataset <- dataset %>%
filter(option == CSA_category,
year >= year_1 & year <= year_2 ,
practice_type == type,
subtype == subtype)
if (!missing(location)) {
dataset <- dataset %>% filter(site == location)
if (!location %in% dataset$site)
stop("assign a valid site name as location")
}
world_data <- ggplot2::map_data('world')%>%
rename(country = region) %>%
select(-subregion) %>%
filter(country %in% dataset$country)
ggplot(data = world_data,
aes(x = long,
y = lat)) +
geom_polygon(data = world_data,
aes(group = group),
color = "#faf9f5",
fill = "#ECEBE7",
size = 1) +
geom_point(data = dataset,
aes(x = longitude_site,
y = latitude_site),
shape = 19,
size = 3,
alpha = 0.8,
color = "#B8B7B3") +
geom_text_repel(data = dataset %>%
ungroup() %>%
distinct(site, .keep_all = TRUE),
aes(label = site,
x = longitude_site,
y = latitude_site),
size = 5,
fontface = "bold",
box.padding = 0.1,
point.padding = 0.1,
nudge_y = 0,
max.overlaps = Inf,
direction = "both",
xlim = c(-Inf, Inf),
alpha = 0.5) +
guides(color = "none")+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional background color as in dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
axis.text = element_blank(),
axis.title = element_blank(),
plot.margin=unit(c(0,20,0,20), "mm"))+
coord_quickmap(clip = "off")
}
p_map <- f_map(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", year_1 = 2019, year_2 = 2021)
p_map
p_map <- f_map(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", year_1 = 2019, year_2 = 2021, location = c("Kaffrine", "Hoima"))
p_map
p_barplot <- f_barplot(CSA_category = "Services", type = "Daily", subtype = "Only forecast", location = location = c("Kaffrine", "Hoima"), year_1 = 2018, year_2 = 2021)
p_barplot <- f_barplot(CSA_category = "Services", type = "Daily", subtype = "Only forecast", location = c("Kaffrine", "Hoima"), year_1 = 2018, year_2 = 2021)
f_map <- function(dataset = uptake_dat, CSA_category, type, subtype, year_1, year_2, location = uptake_dat$site ){
library(ggplot2)
library(tidyverse)
library(ggrepel)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!type %in% dataset$practice_type)
stop("assign a valid practice type")
if (!subtype %in% dataset$subtype)
stop("assign a valid practice subtype")
dataset <- dataset %>%
filter(option == CSA_category,
year >= year_1 & year <= year_2 ,
practice_type == type,
subtype == subtype)
if (!missing(location)) {
dataset <- dataset %>% filter(site %in% location)
if (!location %in% dataset$site)
stop("assign a valid site name as location")
}
world_data <- ggplot2::map_data('world')%>%
rename(country = region) %>%
select(-subregion) %>%
filter(country %in% dataset$country)
ggplot(data = world_data,
aes(x = long,
y = lat)) +
geom_polygon(data = world_data,
aes(group = group),
color = "#faf9f5",
fill = "#ECEBE7",
size = 1) +
geom_point(data = dataset,
aes(x = longitude_site,
y = latitude_site),
shape = 19,
size = 3,
alpha = 0.8,
color = "#B8B7B3") +
geom_text_repel(data = dataset %>%
ungroup() %>%
distinct(site, .keep_all = TRUE),
aes(label = site,
x = longitude_site,
y = latitude_site),
size = 5,
fontface = "bold",
box.padding = 0.1,
point.padding = 0.1,
nudge_y = 0,
max.overlaps = Inf,
direction = "both",
xlim = c(-Inf, Inf),
alpha = 0.5) +
guides(color = "none")+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional background color as in dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
axis.text = element_blank(),
axis.title = element_blank(),
plot.margin=unit(c(0,20,0,20), "mm"))+
coord_quickmap(clip = "off")
}
p_map <- f_map(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", year_1 = 2019, year_2 = 2021, location = c("Kaffrine", "Hoima"))
p_map
# Export
#ggsave(file = "p_map.png", plot = p_map, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
f_barplot <- function(dataset = uptake_dat, CSA_category, type, subtype, location, year_1, year_2){
library(tidyverse)
library(ggplot2)
library(ggrepel)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!type %in% dataset$practice_type)
stop("assign a valid practice type")
if (!subtype %in% dataset$subtype)
stop("assign a valid practice subtype")
years <- dataset %>% ungroup() %>%
filter(site %in% location, option == CSA_category, practice_type == type, subtype == subtype) %>%            select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed site")
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(site %in% location,
option == CSA_category,
year >= year_1 & year <= year_2,
practice_type == type,
subtype == subtype) %>%
# Assign levels to adopted cases
mutate(adopted_cases = factor(adopted_cases, levels = c("Implemented",
"Stopped implementing",
"Know about it",
"Heard about it",
"Never heard about it",
"Accessed and used it",
"Accessed but didn't use it")))%>%
group_by(year, site, practice_type, subtype, gender, n_site) %>%
# Filter out 0 values
filter(n != 0)%>%
# Create graphic variables
mutate(gender_n = paste(substr(gender,1,1), paste0("(",n_site,")"), sep = "\n"))%>%
arrange(year, site, practice_type, subtype, gender, desc(adopted_cases)) %>%
mutate(pos = cumsum(n) - (0.5 * n)) %>%
group_by(site) %>%
mutate(x = case_when(any(str_detect(gender, "Female"))& gender == "Female"~ 0.6,
any(str_detect(gender, "Female"))& gender == "Male"~ 1.6,
any(!str_detect(gender, "Female"))& gender == "Male"~ 0.6),
xend = case_when(any(str_detect(gender, "Female"))& gender == "Female"~ 1.4,
any(str_detect(gender, "Female"))& gender == "Male"~ 2.4,
any(!str_detect(gender, "Female"))& gender == "Male"~ 1.4))
ggplot(dat,
aes(fill = adopted_cases, y = n, x = gender_n)) +
geom_bar(position="stack", stat="identity", alpha = 0.8)+
geom_label_repel(data = dat,
aes(label = paste(round(percentage,0),"%"),
x = gender_n,
y = pos,
color = adopted_cases),
show.legend=F,
size = 3.5,
alpha = 0.8,
force = 0.1,
box.padding = 0.1,
direction = "x",
max.overlaps = Inf,
fill = "white")+
geom_segment(data = dat,
aes(x = x,
xend = xend,
y = n_site,
yend = n_site),
linetype=2, color = "#B8B7B3")+
facet_grid(year ~ site, scales = "free_x", space = "free_x") +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("#9ACD32", "#C67171", "#b5b0b0","#CDC9C9", "#E6E1E1"))+
scale_color_manual(values = c("#9ACD32", "#C67171",  "#b5b0b0","#CDC9C9", "#E6E1E1"))+
# Optional fills
#scale_fill_OkabeIto(order = c(3,4, 1,2))+
#scale_fill_hue(l = 70, c = 45, h = c(95,360))+
#scale_color_hue(l = 70, c = 45, h = c(95,360))+
guides(fill = guide_legend(override.aes = list(size = 7),
title.position = "bottom",
title = ifelse(dat$option == "Practices",
"* Greyscale: not implemented", "")))+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional background colors like in the dashboard
#panel.background = element_rect(fill = "#faf9f5", color = "#ECEBE7", size = 1 ),
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
strip.background = element_rect(fill = "#ECEBE7", color = "#ECEBE7"),
strip.text.x = element_text(margin = margin(2,0,2,0, "mm"), size = 12, color = "#5D5C58"),
strip.text.y = element_text(margin = margin(0,1.5,0,1.5, "mm"), size = 12, color = "#5D5C58"),
legend.title = element_text(size = 7, margin = margin(5,0,0,0, "mm")),
legend.key.size = unit(1.5, 'lines'),
legend.justification = "top",
legend.position = "left",
legend.text = element_text(size = 10, color = "#5D5C58"),
axis.title = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 10, color = "#B8B7B3", vjust = -2),
plot.margin=unit(c(5,10,10,5), "mm"))
}
p_barplot <- f_barplot(CSA_category = "Services", type = "Daily", subtype = "Only forecast", location = c("Kaffrine", "Hoima"), year_1 = 2018, year_2 = 2021)
p_barplot
# Export
#ggsave(file = "p_barplot.png", plot = p_barplot, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
p_barplot <- f_barplot(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", location = c("Kaffrine", "Hoima"), year_1 = 2018, year_2 = 2021)
p_barplot
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
library(devtools)
source_url("https://raw.githubusercontent.com/cmguiob/CSA_Dashboard/main/R/Prepare_Trends_Sankey.R")
f_ggsankey <- function(dataset = Q1_options, location, CSA_category, year_1, year_2){
library(tidyverse)
library(ggsankey)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% Q1_options$location_name)
stop("assign a valid value to location")
years <- Q1_options %>%
filter(location_name %in% location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name %in% location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.5,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 2.5,
color = "#5D5C58",
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 70, c = 45, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional code to use plot background like in the dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank())
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021)
p_sankey
# Export
#ggsave(file = "p_sankey.png", plot = p_sankey, device = "png", type = "cairo", path = "Input a path from your PC, dpi = 300, width = 9.5, height = 5)
f_ggsankey <- function(dataset = Q1_options, location, CSA_category, year_1, year_2,
CSA_option = Q1_options$practice_type){
library(tidyverse)
library(ggsankey)
# Error messages
if (!CSA_category %in% c("Practices", "Services"))
stop("use either Practices or Services as CSA_category")
if (!location %in% dataset$location_name)
stop("assign a valid value to location")
years <- dataset %>%
filter(location_name %in% location, option == CSA_category) %>%
select(year) %>%
distinct()
if (!any(range(years) %in% seq(year_1, year_2, by=1)))
stop("assign a valid year interval to the surveyed location")
if (!missing(CSA_option)) {
dataset <- dataset %>% filter(practice_type %in% CSA_option)
if (!CSA_option %in% dataset$practice_type)
stop("assign a valid CSA option for the selected location and year")
}
# Prepare data for ggsankey
dat <- dataset %>%
# Filter by location type (this will be a selection box in PBI)
filter(location_name %in% location) %>%
filter(option == CSA_category) %>%
filter(year >= year_1 & year <= year_2 ) %>%
select(location_type,
location_name,
farmer_id,
gender,
adopted_cases,
drivers,
practice_type,
exposure_weather,
option)  %>%
# Remove rows for practices for which farmers didn't answer
filter(!is.na(adopted_cases),
!is.na(exposure_weather)) %>%
mutate(location_gender = paste(location_name, paste0("(",substr(gender,1,1),")"))) %>%
mutate(adoption_gender = paste(adopted_cases, paste0("(",substr(gender,1,1),")"))) %>%
distinct()%>%
make_long(location_gender, exposure_weather, adoption_gender, drivers, practice_type) %>%
mutate(node = fct_rev(node),
next_node = fct_rev(next_node))
# Optional: data to label with n or percentage
dat_n <- dat %>%
filter(!is.na(node)) %>%
group_by(x, node)%>%
summarise(count = n()) %>%
ungroup()
# Use the code below to include percentage
#%>%
#group_by(x) %>%
#mutate(percentage = round(count*100/sum(count),1))
# Pot
dat %>%
left_join(dat_n) %>%
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = node)) +
geom_sankey(flow.alpha = 0.5,
width = 0.04)+
# Optional code to display n or percentage
#geom_sankey_text(aes(label = count),
#                 size = 3.5,
#                 vjust = -1.7,
#                 color = "#5D5C58",
#                 check_overlap = TRUE) +
scale_x_discrete(labels = c("Farmers' replies\n by location (gender)",
"Exposure to\n weather shocks",
"Implementation / use\n cases (gender)",
"Drivers / Reasons\n",
"CSA option\n"))+
geom_sankey_text(size = 2.5,
color = "#5D5C58",
check_overlap= FALSE,
aes(label = node))+
scale_fill_hue(l = 70, c = 45, h = c(0, 360))+
theme_minimal()+
theme(panel.grid = element_blank(),
# Optional code to use plot background like in the dashboard
#plot.background = element_rect(fill = "#faf9f5", color = "#faf9f5"),
legend.position = "none",
axis.text.x = element_text(
size = 10,
color = "#B8B7B3",
vjust = 5),
axis.text.y = element_blank(),
axis.title = element_blank())
}
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021)
p_sankey
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = "Agroforestry")
p_sankey
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation")
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation"))
p_sankey <- f_ggsankey(location = "Doyogena", CSA_category = "Practices", year_1 = 2018, year_2 = 2021, CSA_option = c("Agroforestry", "Crop rotation"))
p_sankey
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align="center", fig.showtext = TRUE, fig.retina = 1, dpi = 300, out.width = "90%")
p_barplot <- f_barplot(CSA_category = "Practices", type = "Agroforestry", subtype = "Tree planting", year_1 = 2018, year_2 = 2021)
